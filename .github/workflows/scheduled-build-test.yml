name: Scheduled Build Test

on:
  schedule:
    # 매일 오전 9시와 오후 6시에 실행 (KST 기준)
    - cron: "0 0,9 * * *"
  workflow_dispatch: # 수동 트리거 허용

jobs:
  build-backend:
    name: 백엔드 빌드 및 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Gradle wrapper 검증 및 권한 설정
        working-directory: ./be15_DevEagles_BE
        run: |
          echo "Gradle wrapper 파일 확인:"
          ls -la gradle/wrapper/
          echo "gradlew 파일 확인:"
          ls -la gradlew
          chmod +x gradlew
          echo "Gradle wrapper 검증:"
          ./gradlew --version

      - name: Gradle 캐시 설정
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            be15_DevEagles_BE/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('be15_DevEagles_BE/**/*.gradle*', 'be15_DevEagles_BE/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 의존성 다운로드
        working-directory: ./be15_DevEagles_BE
        run: |
          echo "Gradle 버전 확인:"
          ./gradlew --version
          echo "의존성 다운로드 시작:"
          ./gradlew dependencies --no-daemon --stacktrace
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: 컴파일 테스트
        working-directory: ./be15_DevEagles_BE
        run: ./gradlew compileJava --no-daemon --stacktrace
        id: compile-test
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: 단위 테스트 실행
        working-directory: ./be15_DevEagles_BE
        run: ./gradlew test --no-daemon --stacktrace
        id: unit-test
        env:
          SPRING_PROFILES_ACTIVE: test
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-key-for-ci-cd-testing-purposes-only' }}
          DB_URL: ${{ secrets.TEST_DB_URL || 'jdbc:h2:mem:testdb' }}
          DB_USERNAME: ${{ secrets.TEST_DB_USERNAME || 'sa' }}
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || '' }}
          REDIS_HOST: ${{ secrets.TEST_REDIS_HOST || 'localhost' }}
          REDIS_PORT: ${{ secrets.TEST_REDIS_PORT || '6379' }}

      - name: 빌드 실행
        working-directory: ./be15_DevEagles_BE
        run: ./gradlew build -x test --no-daemon --stacktrace
        id: gradle-build
        env:
          SPRING_PROFILES_ACTIVE: prod
          JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-jwt-secret-key-for-ci-cd-testing-purposes-only' }}
          DB_URL: ${{ secrets.DB_URL || 'jdbc:h2:mem:testdb' }}
          DB_USERNAME: ${{ secrets.DB_USERNAME || 'sa' }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD || '' }}
          REDIS_HOST: ${{ secrets.REDIS_HOST || 'localhost' }}
          REDIS_PORT: ${{ secrets.REDIS_PORT || '6379' }}

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: be15_DevEagles_BE/build/reports/tests/test/

      - name: 빌드 상태 확인
        id: build-status
        run: |
          if [[ "${{ steps.compile-test.outcome }}" == "success" && "${{ steps.unit-test.outcome }}" == "success" && "${{ steps.gradle-build.outcome }}" == "success" ]]; then
            echo "status=성공" >> $GITHUB_OUTPUT
            echo "details=컴파일, 테스트, 빌드 모두 성공" >> $GITHUB_OUTPUT
          else
            echo "status=실패" >> $GITHUB_OUTPUT
            echo "details=컴파일: ${{ steps.compile-test.outcome }}, 테스트: ${{ steps.unit-test.outcome }}, 빌드: ${{ steps.gradle-build.outcome }}" >> $GITHUB_OUTPUT
          fi

      - name: Discord에 백엔드 빌드 결과 전송
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.BUILDTEST_DISCORD_WEBHOOK_URL }}
          title: "🔧 백엔드 빌드 테스트 결과"
          description: |
            **빌드 상태**: ${{ steps.build-status.outputs.status }}
            **세부 사항**: ${{ steps.build-status.outputs.details }}
            **커밋**: ${{ github.sha }}
            **브랜치**: ${{ github.ref_name }}
          color: ${{ steps.build-status.outputs.status == '성공' && '0x00ff00' || '0xff0000' }}
          username: "DevEagles CI/CD"

  build-frontend:
    name: 프론트엔드 빌드 및 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: Node.js 설정
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "be15_DevEagles_FE/package-lock.json"

      - name: npm 캐시 확인
        working-directory: ./be15_DevEagles_FE
        run: |
          echo "package-lock.json 파일 확인:"
          ls -la package-lock.json || echo "package-lock.json이 없습니다"
          echo "node_modules 디렉토리 확인:"
          ls -la node_modules/ || echo "node_modules가 없습니다"

      - name: 의존성 설치
        working-directory: ./be15_DevEagles_FE
        run: npm ci
        id: npm-install

      - name: 린트 검사
        working-directory: ./be15_DevEagles_FE
        run: npm run lint
        continue-on-error: true
        id: lint-check

      - name: 타입 검사 (TypeScript)
        working-directory: ./be15_DevEagles_FE
        run: |
          echo "TypeScript 설정 확인:"
          ls -la tsconfig.json || echo "tsconfig.json이 없습니다"
          echo "package.json에서 type-check 스크립트 확인:"
          npm run type-check || echo "type-check 스크립트가 없습니다"
        continue-on-error: true
        id: type-check

      - name: 단위 테스트 실행
        working-directory: ./be15_DevEagles_FE
        run: |
          echo "package.json에서 test 스크립트 확인:"
          npm run test:unit || npm run test || echo "테스트 스크립트가 없습니다"
        continue-on-error: true
        id: unit-test
        env:
          NODE_ENV: test

      - name: 빌드 실행
        working-directory: ./be15_DevEagles_FE
        run: npm run build
        id: npm-build
        env:
          NODE_ENV: production
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:8080/api' }}
          VITE_WS_URL: ${{ secrets.VITE_WS_URL || 'ws://localhost:8080/ws' }}
          VITE_APP_TITLE: ${{ secrets.VITE_APP_TITLE || 'DevEagles' }}
          VITE_ENVIRONMENT: ${{ secrets.VITE_ENVIRONMENT || 'development' }}

      - name: 빌드 결과물 확인
        working-directory: ./be15_DevEagles_FE
        run: |
          echo "빌드 결과물 크기 확인:"
          du -sh dist/ || echo "dist 디렉토리가 없습니다"
          echo "빌드 파일 목록:"
          ls -la dist/ || echo "dist 디렉토리가 비어있습니다"

      - name: 테스트 결과 업로드
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            be15_DevEagles_FE/coverage/
            be15_DevEagles_FE/test-results/

      - name: 빌드 아티팩트 업로드
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: frontend-build
          path: be15_DevEagles_FE/dist/

      - name: 빌드 상태 확인
        id: fe-build-status
        run: |
          if [[ "${{ steps.npm-install.outcome }}" == "success" && "${{ steps.npm-build.outcome }}" == "success" ]]; then
            echo "status=성공" >> $GITHUB_OUTPUT
            echo "details=의존성 설치, 빌드 성공 | 린트: ${{ steps.lint-check.outcome }}, 타입체크: ${{ steps.type-check.outcome }}, 테스트: ${{ steps.unit-test.outcome }}" >> $GITHUB_OUTPUT
          else
            echo "status=실패" >> $GITHUB_OUTPUT
            echo "details=의존성: ${{ steps.npm-install.outcome }}, 빌드: ${{ steps.npm-build.outcome }}, 린트: ${{ steps.lint-check.outcome }}, 타입체크: ${{ steps.type-check.outcome }}, 테스트: ${{ steps.unit-test.outcome }}" >> $GITHUB_OUTPUT
          fi

      - name: Discord에 프론트엔드 빌드 결과 전송
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.BUILDTEST_DISCORD_WEBHOOK_URL }}
          title: "🎨 프론트엔드 빌드 테스트 결과"
          description: |
            **빌드 상태**: ${{ steps.fe-build-status.outputs.status }}
            **세부 사항**: ${{ steps.fe-build-status.outputs.details }}
            **커밋**: ${{ github.sha }}
            **브랜치**: ${{ github.ref_name }}
          color: ${{ steps.fe-build-status.outputs.status == '성공' && '0x00ff00' || '0xff0000' }}
          username: "DevEagles CI/CD"

  summary:
    name: 빌드 테스트 요약
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always()

    steps:
      - name: 전체 결과 요약
        run: |
          echo "백엔드 빌드 결과: ${{ needs.build-backend.result }}"
          echo "프론트엔드 빌드 결과: ${{ needs.build-frontend.result }}"

      - name: Discord에 전체 요약 전송
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.BUILDTEST_DISCORD_WEBHOOK_URL }}
          title: "📊 전체 빌드 테스트 요약"
          description: |
            **백엔드**: ${{ needs.build-backend.result == 'success' && '✅ 성공' || '❌ 실패' }}
            **프론트엔드**: ${{ needs.build-frontend.result == 'success' && '✅ 성공' || '❌ 실패' }}

            **실행 시간**: ${{ github.event_name == 'schedule' && '정기 실행' || '수동 실행' }}
            **커밋**: ${{ github.sha }}
            **브랜치**: ${{ github.ref_name }}
          color: ${{ needs.build-backend.result == 'success' && needs.build-frontend.result == 'success' && '0x00ff00' || '0xff0000' }}
          username: "DevEagles CI/CD"
