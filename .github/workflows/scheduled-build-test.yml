name: Scheduled Build Test

on:
  schedule:
    # 1시간마다 실행
    - cron: "0 */1 * * *"
  workflow_dispatch: # 수동 트리거 허용

jobs:
  build-backend:
    name: 백엔드 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: JDK 17 설정
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Gradle 파일 확인
        run: |
          echo "백엔드 디렉토리 구조 확인:"
          ls -la ./be15_DevEagles_BE
          echo "Gradle 파일 확인:"
          ls -la ./be15_DevEagles_BE/gradle
          echo "Gradle wrapper 확인:"
          ls -la ./be15_DevEagles_BE/gradle/wrapper

      - name: Gradle wrapper jar 다운로드
        run: |
          mkdir -p ./be15_DevEagles_BE/gradle/wrapper
          wget -O ./be15_DevEagles_BE/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.3.0/gradle/wrapper/gradle-wrapper.jar
          chmod +x ./be15_DevEagles_BE/gradlew
          ls -la ./be15_DevEagles_BE/gradle/wrapper

      - name: Gradle 캐시 설정
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('be15_DevEagles_BE/**/*.gradle*', 'be15_DevEagles_BE/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 빌드
        working-directory: ./be15_DevEagles_BE
        run: |
          # 간단한 빌드만 시도
          ./gradlew -v
          ./gradlew tasks
        continue-on-error: true
        id: gradle-build

      - name: 빌드 상태 확인
        id: build-status
        run: |
          if ${{ steps.gradle-build.outcome == 'success' }}; then
            echo "status=성공" >> $GITHUB_OUTPUT
          else
            echo "status=실패" >> $GITHUB_OUTPUT
          fi

      - name: Discord에 백엔드 빌드 결과 전송
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: https://discordapp.com/api/webhooks/1373208730384076830/xJglBK0zwY531d7uyP6hh62DnjqwtowArFplYLKJ1ZfR6i35mQSv1NDf2kTaYo-zD03T
          title: "백엔드 빌드 테스트 결과"
          description: "백엔드 빌드 상태: ${{ steps.build-status.outputs.status }}"
          color: ${{ steps.gradle-build.outcome == 'success' && '0x00ff00' || '0xff0000' }}
          status: ${{ steps.gradle-build.outcome }}

  build-frontend:
    name: 프론트엔드 빌드 테스트
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Node.js 설정
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: 프론트엔드 파일 확인 및 수정
        run: |
          echo "프론트엔드 디렉토리 확인:"
          ls -la ./be15_DevEagles_FE
          echo "src 디렉토리 확인:"
          ls -la ./be15_DevEagles_FE/src

          # App.vue 확인
          echo "App.vue 내용 확인:"
          cat ./be15_DevEagles_FE/src/App.vue

          # assets 디렉토리 생성 및 필요한 파일 추가
          mkdir -p ./be15_DevEagles_FE/src/assets
          touch ./be15_DevEagles_FE/src/assets/main.css
          echo "/* 임시 스타일시트 */" > ./be15_DevEagles_FE/src/assets/main.css

          # 더미 SVG 로고 파일 생성
          echo '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><circle cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red" /></svg>' > ./be15_DevEagles_FE/src/assets/logo.svg

          # HelloWorld.vue 컴포넌트 생성
          mkdir -p ./be15_DevEagles_FE/src/components
          cat << 'EOF' > ./be15_DevEagles_FE/src/components/HelloWorld.vue
<script setup>
defineProps({
  msg: {
    type: String,
    required: true
  }
})
</script>

<template>
  <div class="greetings">
    <h1 class="green">{{ msg }}</h1>
    <h3>
      빌드 테스트용 더미 컴포넌트입니다.
    </h3>
  </div>
</template>

<style scoped>
h1 {
  font-weight: 500;
  font-size: 2.6rem;
  position: relative;
  top: -10px;
}

h3 {
  font-size: 1.2rem;
}

.greetings h1,
.greetings h3 {
  text-align: center;
}

@media (min-width: 1024px) {
  .greetings h1,
  .greetings h3 {
    text-align: left;
  }
}
</style>
EOF

          # TheWelcome.vue 컴포넌트 생성
          cat << 'EOF' > ./be15_DevEagles_FE/src/components/TheWelcome.vue
<script setup>
</script>

<template>
  <div class="welcome">
    <h1>빌드 테스트 페이지</h1>
    <p>이 페이지는 CI/CD 파이프라인 테스트를 위한 더미 페이지입니다.</p>
  </div>
</template>

<style scoped>
.welcome {
  text-align: center;
  padding: 20px;
}
</style>
EOF

          # 생성된 파일 확인
          echo "컴포넌트 디렉토리 확인:"
          ls -la ./be15_DevEagles_FE/src/components

      - name: NPM 캐시 설정
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('be15_DevEagles_FE/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 의존성 설치
        working-directory: ./be15_DevEagles_FE
        run: npm install
        continue-on-error: true
        id: npm-install

      - name: 빌드 실행
        working-directory: ./be15_DevEagles_FE
        run: npm run build
        continue-on-error: true
        id: npm-build

      - name: 빌드 상태 확인
        id: fe-build-status
        run: |
          if ${{ steps.npm-build.outcome == 'success' }}; then
            echo "status=성공" >> $GITHUB_OUTPUT
          else
            echo "status=실패" >> $GITHUB_OUTPUT
          fi

      - name: Discord에 프론트엔드 빌드 결과 전송
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: https://discordapp.com/api/webhooks/1373208730384076830/xJglBK0zwY531d7uyP6hh62DnjqwtowArFplYLKJ1ZfR6i35mQSv1NDf2kTaYo-zD03T
          title: "프론트엔드 빌드 테스트 결과"
          description: "프론트엔드 빌드 상태: ${{ steps.fe-build-status.outputs.status }}"
          color: ${{ steps.npm-build.outcome == 'success' && '0x00ff00' || '0xff0000' }}
          status: ${{ steps.npm-build.outcome }}
